(1) import zipfile
import os
zip_file_path = r"C:\Users\DELL\Downloads\archive (10).zip"
extract_path = r"C:\Users\DELL\Downloads\extracted"  # Set your desired extraction path

# Create extraction directory if it doesn't exist
os.makedirs(extract_path, exist_ok=True)

# Extract the contents of the ZIP file
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("Extraction complete. Contents are in:", extract_path)

(2) import os

new_path = r"C:\Users\DELL\Downloads\extracted"

# Create the directory if it doesn't exist
os.makedirs(new_path, exist_ok=True)

# Change the current working directory
os.chdir(new_path)

# Check the updated current working directory
cur_path = os.getcwd()
print("Current Working Directory:", cur_path)

(3) import numpy as np #For mathematical functions
import pandas as pd #For data analysis and manipulation
import matplotlib.pyplot as plt #For data visualisation
from PIL import Image #For opening,manipulating and saving images of different formats
import os #To interact with operating system and to edit and manipulate files in the system
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout

data = []
labels = []
classes = 43
cur_path = os.getcwd()
cur_path = r"C:\Users\DELL\Downloads\extracted"
for i in range(classes):
    path = os.path.join(cur_path, 'train', str(i))
    print("Class {} Path:".format(i), path)
    images = os.listdir(path)
    print("Number of images in Class {}: {}".format(i, len(images)))
    for a in images:
        try:
            image = Image.open(os.path.join(path, a))
            image = image.resize((30, 30))
            image = np.array(image)
            data.append(image)
            labels.append(i)
        except:
            print("Error loading image")
# Converting lists into numpy arrays
data = np.array(data)
labels = np.array(labels)
print("Number of total images:", len(data))
print(data.shape, labels.shape)
# Splitting training and testing dataset
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

# Convert data types to uint8
X_train = X_train.astype('uint8')
X_test = X_test.astype('uint8')
y_train = y_train.astype('uint8')
y_test = y_test.astype('uint8')

# Converting the labels into one hot encoding
y_train = to_categorical(y_train, 43).astype('uint8')
y_test = to_categorical(y_test, 43).astype('uint8')

# Building the model
model = Sequential()
model.add(Conv2D(filters=32, kernel_size=(5, 5), activation='relu', input_shape=(30, 30, 3)))
model.add(Conv2D(filters=32, kernel_size=(5, 5), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Dropout(rate=0.25))
model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Dropout(rate=0.25))
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dropout(rate=0.5))
model.add(Dense(43, activation='softmax'))
# Compilation of the model

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

epochs = 15
history = model.fit(X_train, y_train, batch_size=32, epochs=epochs, validation_data=(X_test, y_test))
model.save("my_model.h5")

# Plotting graphs for accuracy
plt.figure(0)
plt.plot(history.history['accuracy'], label='training accuracy')
plt.plot(history.history['val_accuracy'], label='val accuracy')
plt.title('Accuracy')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend()
plt.show()

plt.figure(1)
plt.plot(history.history['loss'], label='training loss')
plt.plot(history.history['val_loss'], label='val loss')
plt.title('Loss')
plt.xlabel('epochs')
plt.ylabel('loss')
plt.legend()
plt.show()
# Testing accuracy on the test dataset
from sklearn.metrics import accuracy_score

y_test_data = pd.read_csv('Test.csv')  # Replace with the actual filename

labels_test = y_test_data["ClassId"].values
imgs_test = y_test_data["Path"].values

data_test = []

for img in imgs_test:
    image = Image.open(img)
    image = image.resize((30, 30))
    data_test.append(np.array(image))

X_test_data = np.array(data_test)

# Use predict method
pred_probs = model.predict(X_test_data)

# Get the predicted classes using argmax
pred = np.argmax(pred_probs, axis=1)

# Accuracy with the test data
from sklearn.metrics import accuracy_score
print(accuracy_score(labels_test, pred))

model.save('traffic_classifier.h5')


(4) import tkinter as tk
from tkinter import filedialog
from tkinter import *
from PIL import ImageTk, Image
import numpy
from keras.models import load_model

# Load the trained model to classify the sign
model = load_model('traffic_classifier.h5')
# Dictionary to label all traffic signs class.
classes = { 1: 'Speed limit (20km/h)',
            2: 'Speed limit (30km/h)',
            3: 'Speed limit (50km/h)',
            4: 'Speed limit (60km/h)',
            5: 'Speed limit (70km/h)',
            6: 'Speed limit (80km/h)',
            7: 'End of speed limit (80km/h)',
            8: 'Speed limit (100km/h)',
            9: 'Speed limit (120km/h)',
           10: 'No passing',
           11: 'No passing veh over 3.5 tons',
           12: 'Right-of-way at intersection',
           13: 'Priority road',
           14: 'Yield',
           15: 'Stop',
           16: 'No vehicles',
           17: 'Veh > 3.5 tons prohibited',
           18: 'No entry',
           19: 'General caution',
           20: 'Dangerous curve left',
           21: 'Dangerous curve right',
           22: 'Double curve',
           23: 'Bumpy road',
           24: 'Slippery road',
           25: 'Road narrows on the right',
           26: 'Road work',
           27: 'Traffic signals',
           28: 'Pedestrians',
           29: 'Children crossing',
           30: 'Bicycles crossing',
           31: 'Beware of ice/snow',
           32: 'Wild animals crossing',
           33: 'End speed + passing limits',
           34: 'Turn right ahead',
           35: 'Turn left ahead',
           36: 'Ahead only',
           37: 'Go straight or right',
           38: 'Go straight or left',
           39: 'Keep right',
           40: 'Keep left',
           41: 'Roundabout mandatory',
           42: 'End of no passing',
           43: 'End no passing veh > 3.5 tons'}

# Initialize GUI
top = tk.Tk()
top.geometry('800x600')
top.title('Traffic sign classification')
top.configure(background='#CDCDCD')

label = Label(top, background='#CDCDCD', font=('arial', 20, 'bold'))
sign_image = Label(top)

def classify(file_path):
    global label_packed
    image = Image.open(file_path)
    image = image.resize((30, 30))
    image = numpy.expand_dims(image, axis=0)
    image = numpy.array(image)
    pred_probs = model.predict(image)
    pred = numpy.argmax(pred_probs, axis=1)[0]

    print("Predicted Class Label:", pred)
    print("Raw Probabilities:", pred_probs)

    try:
        sign = classes[pred + 1]
        print("Predicted Sign:", sign)
        label.configure(foreground='#011638', text=sign)
    except KeyError:
        print("Error: Class label not found in the classes dictionary.")

def show_classify_button(file_path):
    classify_b = Button(top, text="Classify Image", command=lambda: classify(file_path), padx=10, pady=5)
    classify_b.configure(background='#364156', foreground='black', font=('arial', 15, 'bold'))
    classify_b.place(relx=0.79, rely=0.46)

def upload_image():
    try:
        file_path = filedialog.askopenfilename()
        uploaded = Image.open(file_path)
        uploaded.thumbnail(((top.winfo_width() / 2.25), (top.winfo_height() / 2.25)))
        im = ImageTk.PhotoImage(uploaded)

        sign_image.configure(image=im)
        sign_image.image = im
        label.configure(text='')
        show_classify_button(file_path)
    except:
        pass

upload = Button(top, text="Upload an image", command=upload_image, padx=10, pady=5)
upload.configure(background='#364156', foreground='black', font=('arial', 15, 'bold'))

upload.pack(side=BOTTOM, pady=10)
sign_image.pack(side=BOTTOM, expand=True)
label.pack(side=BOTTOM, expand=True)
heading = Label(top, text="Know Your Traffic Sign", pady=10, font=('arial', 28, 'bold'))
heading.configure(background='#CDCDCD', foreground='#364156')
heading.pack()
top.mainloop()
